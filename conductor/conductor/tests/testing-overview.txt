Conductor testing
-----------------

All unit tests are to be placed in the conductor/tests directory,
and tests might be organized by tested subsystem. Each subsystem directory
must contain a separate blank __init__.py for test discovery to function.

An example directory structure illustrating the above:

conductor/tests
|-- engine
|   |-- __init__.py
|   |-- test1.py
|   |-- test2.py
|   |-- test3.py
|-- __init__.py
|-- test_plan.py

If a given test has no overlapping requirements (variables or same
routines) a new test does not need to create a subdirectory under the
test type.

Implementing a test
-------------------

testrepository - http://pypi.python.org/pypi/testrepository is used to
find and run tests, parallelize their runs, and record timing/results.

If new dependencies are introduced upon the development of a test, the
test-requirements.txt file needs to be updated so that the virtual
environment will be able to successfully execute all tests.

Running the tests
-----------------

The advised way of running tests is by using tox:

$ tox

By default, this will run the unit test suite with Python 2.7 and PEP8/HACKING
style checks. To run only one type of test you can explicitly invoke tox
with the test environment to use.

$ tox -epy27 # test suite on python 2.7
$ tox -epep8 # run full source code checker

To run only a subset of tests, you can provide tox with a regex argument
defining which tests to execute.

$ tox -epy27 -- FooTests

To use a debugger like pdb during the test run, one has to run tests directly
with another, non-concurrent test runner instead of using testr.

That also presumes you have a virtual env with all conductor dependencies active.
Below is an example bash script using the testtools test runner that also allows
running single tests by providing a regex.

#!/usr/bin/env sh
testlist=$(mktemp)
testr list-tests "$1" > $testlist
python -m testtools.run --load-list $testlist

Another way to use debugger for testing is run tox with command:
$ tox -e debug -- conductor.tests.test_foo.FooTest.test_foo_does_something

Note: This last approach is mostly useful to run single tests.